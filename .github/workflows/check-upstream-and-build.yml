name: Check AsTeRICS Grid Release and Build APK

on:
  schedule:
    - cron: '0 6 1,15 * *'
  workflow_dispatch:

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v3

      - name: Get latest upstream release
        id: get_latest_release
        run: |
          LATEST=$(curl -s https://api.github.com/repos/asterics/AsTeRICS-Grid/releases/latest | jq -r .tag_name)
          echo "latest_tag=$LATEST" >> $GITHUB_OUTPUT

      - name: Get stored version
        id: get_stored
        run: |
          if [ -f .latest_release ]; then
            STORED=$(cat .latest_release)
          else
            STORED="none"
          fi
          echo "stored_tag=$STORED" >> $GITHUB_OUTPUT

      - name: Store new release version
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        run: echo "${{ steps.get_latest_release.outputs.latest_tag }}" > .latest_release

      - name: Commit version file
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git pull --rebase origin main
          git add .latest_release
          git commit -m "Update release version to ${{ steps.get_latest_release.outputs.latest_tag }}"
          git push

      - name: Build APK from PWA
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        uses: osgioia/pwa-to-apk-action@v1.0.3
        with:
          project-root-folder: "."

      - name: Decode keystore
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        run: |
          echo "${{ secrets.SIGNING_KEY_BASE64 }}" | base64 -d > my-release-key.jks

      - name: Align APK
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        run: |
          zipalign -v -p 4 ./app-release-unsigned-aligned.apk ./app-release-aligned.apk

      - name: Sign APK
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        run: |
          apksigner sign \
            --ks my-release-key.jks \
            --ks-key-alias "${{ secrets.SIGNING_KEY_ALIAS }}" \
            --ks-pass pass:"${{ secrets.SIGNING_STORE_PASSWORD }}" \
            --key-pass pass:"${{ secrets.SIGNING_KEY_PASSWORD }}" \
            --out ./app-release-signed.apk \
            ./app-release-aligned.apk

      - name: Verify APK signature
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        run: apksigner verify --verbose ./app-release-signed.apk

      - name: Rename APK with version and timestamp
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        run: |
          RAW_TAG="${{ steps.get_latest_release.outputs.latest_tag }}"
          TAG=$(echo "$RAW_TAG" | tr -d '+/:')
          DATE="build-$(date +"%Y-%m-%d-%H.%M-%z" | tr -d '+')"
          mv ./app-release-signed.apk "./AsTeRICS-Grid-${TAG}-${DATE}.apk"

      - name: Create Git tag
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        run: |
          git tag ${{ steps.get_latest_release.outputs.latest_tag }}
          git push origin ${{ steps.get_latest_release.outputs.latest_tag }}

      - name: Release APK
        if: steps.get_latest_release.outputs.latest_tag != steps.get_stored.outputs.stored_tag
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_latest_release.outputs.latest_tag }}
          name: "APK for AsTeRICS Grid ${{ steps.get_latest_release.outputs.latest_tag }}"
          files: 'AsTeRICS-Grid-*.apk'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
